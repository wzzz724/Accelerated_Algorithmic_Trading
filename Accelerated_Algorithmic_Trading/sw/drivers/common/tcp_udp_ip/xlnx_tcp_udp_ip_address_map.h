/*
 * Copyright 2021 Xilinx, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef XLNX_TCP_UDP_IP_ADDRESS_MAP_H
#define XLNX_TCP_UDP_IP_ADDRESS_MAP_H


/* The following are the standard kernel control registers */
#define XLNX_TCP_UDP_IP_KERNEL_CONTROL_OFFSET						(0x00000000)
#define XLNX_TCP_UDP_IP_KERNEL_GLOBAL_INTERRUPT_ENABLE_OFFSET		(0x00000004)
#define XLNX_TCP_UDP_IP_KERNEL_IP_INTERRUPT_ENABLE_OFFSET			(0x00000008)
#define XLNX_TCP_UDP_IP_KERNEL_IP_INTERRUPT_STATUS_OFFSET			(0x0000000C)


/* The rest of the registers are specific to this kernel */
#define XLNX_TCP_UDP_IP_GENERAL_REG_BLOCK_START_OFFSET				(0x00000010)
#define XLNX_TCP_UDP_IP_IGMP_REG_BLOCK_START_OFFSET					(0x00001000)
#define XLNX_TCP_UDP_IP_ARP_REG_BLOCK_START_OFFSET                  (0x00002000)
#define XLNX_TCP_UDP_IP_ICMP_REG_BLOCK_START_OFFSET                 (0x00003000)
#define XLNX_TCP_UDP_IP_IP_HANDLER_REG_BLOCK_START_OFFSET           (0x00004000)
#define XLNX_TCP_UDP_IP_MAC_IP_ENCODER_REG_BLOCK_START_OFFSET       (0x00005000)
#define XLNX_TCP_UDP_IP_UDP_REG_BLOCK_START_OFFSET                  (0x00008000)
#define XLNX_TCP_UDP_IP_TCP_REG_BLOCK_START_OFFSET                  (0x0000C000)










// General
#define XLNX_TCP_UDP_IP_MAC_ADDRESS_CONFIG1_REG_OFFSET				(XLNX_TCP_UDP_IP_GENERAL_REG_BLOCK_START_OFFSET + 0x00000000)
#define XLNX_TCP_UDP_IP_MAC_ADDRESS_CONFIG2_REG_OFFSET				(XLNX_TCP_UDP_IP_GENERAL_REG_BLOCK_START_OFFSET + 0x00000004)
#define XLNX_TCP_UDP_IP_IPv4_ADDRESS_CONFIG_REG_OFFSET				(XLNX_TCP_UDP_IP_GENERAL_REG_BLOCK_START_OFFSET + 0x00000008)
#define XLNX_TCP_UDP_IP_SUBNET_MASK_CONFIG_REG_OFFSET				(XLNX_TCP_UDP_IP_GENERAL_REG_BLOCK_START_OFFSET + 0x0000000C)
#define XLNX_TCP_UDP_IP_GATEWAY_ADDRESS_CONFIG_REG_OFFSET			(XLNX_TCP_UDP_IP_GENERAL_REG_BLOCK_START_OFFSET + 0x00000010)


//
// IGMP
//
#define XLNX_TCP_UDP_IP_IGMP_HOST_OP_TOGGLE_REG_OFFSET			    (XLNX_TCP_UDP_IP_IGMP_REG_BLOCK_START_OFFSET + 0x00000010)
#define XLNX_TCP_UDP_IP_IGMP_HOST_OPCODE_REG_OFFSET					(XLNX_TCP_UDP_IP_IGMP_REG_BLOCK_START_OFFSET + 0x00000018)
#define XLNX_TCP_UDP_IP_IGMP_MULTICAST_ADDRESS_IN_REG_OFFSET	    (XLNX_TCP_UDP_IP_IGMP_REG_BLOCK_START_OFFSET + 0x00000020)
#define XLNX_TCP_UDP_IP_IGMP_TABLE_ADDR_REG_OFFSET                  (XLNX_TCP_UDP_IP_IGMP_REG_BLOCK_START_OFFSET + 0x00000028)
#define XLNX_TCP_UDP_IP_IGMP_MULTICAST_ADDRESS_OUT_REG_OFFSET       (XLNX_TCP_UDP_IP_IGMP_REG_BLOCK_START_OFFSET + 0x00000030)
#define XLNX_TCP_UDP_IP_IGMP_ENABLE_REG_OFFSET                      (XLNX_TCP_UDP_IP_IGMP_REG_BLOCK_START_OFFSET + 0x00000040)
#define XLNX_TCP_UDP_IP_IGMP_STATS_START_OFFSET                     (XLNX_TCP_UDP_IP_IGMP_REG_BLOCK_START_OFFSET + 0x00000048)
#define XLNX_TCP_UDP_IP_NUM_IGMP_STATS_INVALID_CSUM		            (XLNX_TCP_UDP_IP_IGMP_REG_BLOCK_START_OFFSET + 0x00000048)
#define XLNX_TCP_UDP_IP_NUM_IGMP_STATS_IGMPV3_QUERY		            (XLNX_TCP_UDP_IP_IGMP_REG_BLOCK_START_OFFSET + 0x00000058)
#define XLNX_TCP_UDP_IP_NUM_IGMP_STATS_INVALID_QUERY		        (XLNX_TCP_UDP_IP_IGMP_REG_BLOCK_START_OFFSET + 0x00000068)
#define XLNX_TCP_UDP_IP_IGMP_VER_OFFSET             		        (XLNX_TCP_UDP_IP_IGMP_REG_BLOCK_START_OFFSET + 0x00000078)

#define XLNX_TCP_UDP_IP_NUM_IGMP_STATS_REGISTERS                    (3) 




//
// ARP
//
#define XLNX_TCP_UDP_IP_ARP_IP_ADDRESS_INPUT_REG_OFFSET             (XLNX_TCP_UDP_IP_ARP_REG_BLOCK_START_OFFSET + 0x00000010)
#define XLNX_TCP_UDP_IP_ARP_MAC_ADDRESS_INPUT_1_REG_OFFSET          (XLNX_TCP_UDP_IP_ARP_REG_BLOCK_START_OFFSET + 0x00000014)
#define XLNX_TCP_UDP_IP_ARP_MAC_ADDRESS_INPUT_2_REG_OFFSET          (XLNX_TCP_UDP_IP_ARP_REG_BLOCK_START_OFFSET + 0x00000018)
#define XLNX_TCP_UDP_IP_ARP_ENTRY_VALID_INPUT_REG_OFFSET            (XLNX_TCP_UDP_IP_ARP_REG_BLOCK_START_OFFSET + 0x0000001C)
#define XLNX_TCP_UDP_IP_ARP_IP_ADDRESS_OUTPUT_REG_OFFSET            (XLNX_TCP_UDP_IP_ARP_REG_BLOCK_START_OFFSET + 0x00000024)
#define XLNX_TCP_UDP_IP_ARP_MAC_ADDRESS_OUTPUT_1_REG_OFFSET         (XLNX_TCP_UDP_IP_ARP_REG_BLOCK_START_OFFSET + 0x00000028)
#define XLNX_TCP_UDP_IP_ARP_MAC_ADDRESS_OUTPUT_2_REG_OFFSET         (XLNX_TCP_UDP_IP_ARP_REG_BLOCK_START_OFFSET + 0x0000002C)
#define XLNX_TCP_UDP_IP_ARP_ENTRY_VALID_OUTPUT_REG_OFFSET           (XLNX_TCP_UDP_IP_ARP_REG_BLOCK_START_OFFSET + 0x00000030)
#define XLNX_TCP_UDP_IP_ARP_OPERATION_TOGGLE_REG_OFFSET             (XLNX_TCP_UDP_IP_ARP_REG_BLOCK_START_OFFSET + 0x00000048) 
#define XLNX_TCP_UDP_IP_ARP_OPCODE_REG_OFFSET                       (XLNX_TCP_UDP_IP_ARP_REG_BLOCK_START_OFFSET + 0x00000050)
#define XLNX_TCP_UDP_IP_ARP_ENTRY_BIN_REG_OFFSET                    (XLNX_TCP_UDP_IP_ARP_REG_BLOCK_START_OFFSET + 0x00000058)
#define XLNX_TCP_UDP_IP_ARP_STATS_START_OFFSET                      (XLNX_TCP_UDP_IP_ARP_REG_BLOCK_START_OFFSET + 0x00000060)
#define XLNX_TCP_UDP_IP_ARP_STATS_REQ_SENT                          (XLNX_TCP_UDP_IP_ARP_REG_BLOCK_START_OFFSET + 0x00000060)
#define XLNX_TCP_UDP_IP_ARP_STATS_REPLIES_SENT			            (XLNX_TCP_UDP_IP_ARP_REG_BLOCK_START_OFFSET + 0x00000068)
#define XLNX_TCP_UDP_IP_ARP_STATS_REQ_RECEIVED			            (XLNX_TCP_UDP_IP_ARP_REG_BLOCK_START_OFFSET + 0x00000070)
#define XLNX_TCP_UDP_IP_ARP_STATS_REPLIES_RECEIVED		            (XLNX_TCP_UDP_IP_ARP_REG_BLOCK_START_OFFSET + 0x00000078)
#define XLNX_TCP_UDP_IP_ARP_STATS_REQ_SENT_LOST			            (XLNX_TCP_UDP_IP_ARP_REG_BLOCK_START_OFFSET + 0x00000080)

#define XLNX_TCP_UDP_IP_NUM_ARP_STATS_REGISTERS                     (5) 


//
// ICMP
//
#define XLNX_TCP_UDP_IP_ICMP_ENABLE_REG_OFFSET                      (XLNX_TCP_UDP_IP_ICMP_REG_BLOCK_START_OFFSET + 0x00000010)
#define XLNX_TCP_UDP_IP_ICMP_STATS_START_OFFSET                     (XLNX_TCP_UDP_IP_ICMP_REG_BLOCK_START_OFFSET + 0x00000018)
#define XLNX_TCP_UDP_IP_ICMP_STATS_ECHO_REQUESTS_RECEIVED	        (XLNX_TCP_UDP_IP_ICMP_REG_BLOCK_START_OFFSET + 0x00000018)
#define XLNX_TCP_UDP_IP_ICMP_STATS_ECHO_REPLIES_SENT		        (XLNX_TCP_UDP_IP_ICMP_REG_BLOCK_START_OFFSET + 0x00000028)

#define XLNX_TCP_UDP_IP_NUM_ICMP_STATS_REGISTERS                    (2) 





//
// IP Handler
//
#define XLNX_TCP_UDP_IP_IP_HANDLER_STATS_START_OFFSET               (XLNX_TCP_UDP_IP_IP_HANDLER_REG_BLOCK_START_OFFSET + 0x00000010)
#define XLNX_TCP_UDP_IP_IP_HANDLER_STATS_IPINHDRERRORS	            (XLNX_TCP_UDP_IP_IP_HANDLER_REG_BLOCK_START_OFFSET + 0x00000010)
#define XLNX_TCP_UDP_IP_IP_HANDLER_STATS_IPINDELIVERS	    	    (XLNX_TCP_UDP_IP_IP_HANDLER_REG_BLOCK_START_OFFSET + 0x00000020)
#define XLNX_TCP_UDP_IP_IP_HANDLER_STATS_IPINUNKNOWNPROTOS	        (XLNX_TCP_UDP_IP_IP_HANDLER_REG_BLOCK_START_OFFSET + 0x00000030)
#define XLNX_TCP_UDP_IP_IP_HANDLER_STATS_IPINADDRERRORS	            (XLNX_TCP_UDP_IP_IP_HANDLER_REG_BLOCK_START_OFFSET + 0x00000040)
#define XLNX_TCP_UDP_IP_IP_HANDLER_STATS_IPINRECEIVES	            (XLNX_TCP_UDP_IP_IP_HANDLER_REG_BLOCK_START_OFFSET + 0x00000050)

#define XLNX_TCP_UDP_IP_NUM_IP_HANDLER_STATS_REGISTERS              (5)




//
// MAC IP Encoder
//
#define XLNX_TCP_UDP_IP_MAC_IP_ENCODER_STATS_START_OFFSET           (XLNX_TCP_UDP_IP_MAC_IP_ENCODER_REG_BLOCK_START_OFFSET + 0x00000010)
#define XLNX_TCP_UDP_IP_MAC_IP_ENCODER_STATS_IPV4_PACKETS_SENT	    (XLNX_TCP_UDP_IP_MAC_IP_ENCODER_REG_BLOCK_START_OFFSET + 0x00000010)
#define XLNX_TCP_UDP_IP_MAC_IP_ENCODER_STATS_PACKETS_DROPPED	    (XLNX_TCP_UDP_IP_MAC_IP_ENCODER_REG_BLOCK_START_OFFSET + 0x00000020)

#define XLNX_TCP_UDP_IP_NUM_MAC_IP_ENCODER_STATS_REGISTERS          (2)





//
// UDP 
//

#define XLNX_TCP_UDP_IP_UDP_STATS_START_OFFSET                      (XLNX_TCP_UDP_IP_UDP_REG_BLOCK_START_OFFSET + 0x00000010)
#define XLNX_TCP_UDP_IP_UDP_STATS_DATAGRAMS_TRANSMITTED 	        (XLNX_TCP_UDP_IP_UDP_REG_BLOCK_START_OFFSET + 0X00000010)
#define XLNX_TCP_UDP_IP_UDP_STATS_DATAGRAMS_RECEIVED 		        (XLNX_TCP_UDP_IP_UDP_REG_BLOCK_START_OFFSET + 0X00000020)
#define XLNX_TCP_UDP_IP_UDP_STATS_DATAGRAMS_RECEIVED_INVALID_PORT   (XLNX_TCP_UDP_IP_UDP_REG_BLOCK_START_OFFSET + 0X00000030)

#define XLNX_TCP_UDP_IP_NUM_UDP_STATS_REGISTERS					    (3) 
#define XLNX_TCP_UDP_IP_UDP_LISTEN_PORT_CAM_OFFSET                  (XLNX_TCP_UDP_IP_UDP_REG_BLOCK_START_OFFSET + 0x00002000)




//
// TCP
//
#define XLNX_TCP_UDP_IP_TCP_STATS_START_OFFSET                      (XLNX_TCP_UDP_IP_TCP_REG_BLOCK_START_OFFSET + 0x00000010)
#define XLNX_TCP_UDP_IP_TCP_STATS_TCPINSEGS			                (XLNX_TCP_UDP_IP_TCP_REG_BLOCK_START_OFFSET + 0x00000010)
#define XLNX_TCP_UDP_IP_TCP_STATS_TCPINERRS			                (XLNX_TCP_UDP_IP_TCP_REG_BLOCK_START_OFFSET + 0x00000020)
#define XLNX_TCP_UDP_IP_TCP_STATS_TCPOUTSEGS			            (XLNX_TCP_UDP_IP_TCP_REG_BLOCK_START_OFFSET + 0x00000030)
#define XLNX_TCP_UDP_IP_TCP_STATS_TCPRETRANSSEGS		            (XLNX_TCP_UDP_IP_TCP_REG_BLOCK_START_OFFSET + 0x00000040)
#define XLNX_TCP_UDP_IP_TCP_STATS_TCPACTIVEOPENS		            (XLNX_TCP_UDP_IP_TCP_REG_BLOCK_START_OFFSET + 0x00000050)
#define XLNX_TCP_UDP_IP_TCP_STATS_TCPPASSIVEOPENS		            (XLNX_TCP_UDP_IP_TCP_REG_BLOCK_START_OFFSET + 0x00000060)
#define XLNX_TCP_UDP_IP_TCP_STATS_TCPATTEMPTFAILS		            (XLNX_TCP_UDP_IP_TCP_REG_BLOCK_START_OFFSET + 0x00000070)
#define XLNX_TCP_UDP_IP_TCP_STATS_TCPESTABRESETS		            (XLNX_TCP_UDP_IP_TCP_REG_BLOCK_START_OFFSET + 0x00000080)
#define XLNX_TCP_UDP_IP_TCP_STATS_TCPCURRESTAB			            (XLNX_TCP_UDP_IP_TCP_REG_BLOCK_START_OFFSET + 0x00000090)

#define XLNX_TCP_UDP_IP_NUM_TCP_STATS_REGISTERS                     (9)












#endif //XLNX_TCP_UDP_IP_ADDRESS_MAP_H

